---
interface Props {
  movieid: string;
}
import { API_SECRET_TOKEN } from "astro:env/server";

const fetchData = async () => {
  try {
    const response = await fetch(`https://api.themoviedb.org/3/movie/${Astro.props.movieid}`, {
      headers: {
        Authorization: `Bearer ${API_SECRET_TOKEN}`,
      },
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error("Error fetching data:", error);
    return null;
  }
};

const movie = await fetchData();

//const movie = (await getCollection("apiMovies")).find((m) => m.id === Astro.props.movieid);
---

<section>
  {console.log(movie)}
  <article class="border-2 p-4">
    <h1>
      {movie.title}
    </h1>
    <h5>
      Rating: ({movie.vote_average}/10) - Votes: {movie.vote_count}{" "}
    </h5>
    <div class="grid">
      <img src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`} />

      <ul>
        <li>
          <strong>Tagline:</strong>
          {movie.tagline}
        </li>
        <li>
          <strong>Overview:</strong>
          {movie.overview}
        </li>
        <hr />
        <li>Release date: {movie.release_date}</li>
        <li>Language: {movie.original_language.toUpperCase()}</li>
        <li>Popularity: {movie.popularity}</li>
        <li>
          Categories:
          {movie.genres.map((c) => <b>{c.name}, </b>)}
        </li>
        <li><a href={movie.homepage}>Homepage: {movie.homepage}</a></li>
        <li>
          <a href={`https://www.imdb.com/title/${movie.imdb_id}`}
            >Imdb: {`https://www.imdb.com/title/${movie.imdb_id}`}</a
          >
        </li>
        <li>
          Production Company:
          {movie.production_companies.map((c) => <b>{c.name}, </b>)}
        </li>
      </ul>
    </div>
    <footer>
      <button class="add-to-cart" data-movieid={movie.id}> Add to cart </button>
    </footer>
  </article>
</section>
<script is:inline>
  // Wait for the DOM to load
  document.addEventListener("DOMContentLoaded", () => {
    const buttons = document.querySelectorAll(".add-to-cart");

    buttons.forEach((btn) => {
      btn.addEventListener("click", () => {
        const movieId = parseInt(btn.getAttribute("data-movieid"));

        // Parse the cart from localStorage (or start a new one)
        const cart = JSON.parse(localStorage.getItem("cart")) || [];

        // Check if item is already in cart
        const existingItem = cart.find((item) => item.id === movieId);
        if (existingItem) {
          existingItem.quantity += 1;
        } else {
          cart.push({ id: movieId, quantity: 1 });
        }

        // Save back to localStorage
        localStorage.setItem("cart", JSON.stringify(cart));
        alert("Movie added to cart!");
      });
    });
  });
</script>
<style>
  div {
    grid-template-columns: minmax(300px, 320px) minmax(300px, 1fr);
    @media (width <= 680px) {
      grid-template-columns: 1fr;
    }
  }
  article {
    border-color: rgba(0, 0, 0, 0.432);
  }
  a:hover {
    color: var(--pico-primary-focus);
  }
  ul {
    margin-left: 1.5rem;
  }
  article p,
  article ul {
    color: var(--pico-h3-color);
  }
</style>
